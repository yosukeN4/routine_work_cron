# This is a basic workflow to help you get started with Actions
name: Bayashi portfolio#1

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      name:
        required: true
      dev:
        type: environment
        description: Development Environment
        required: true
      prod:
        type: environment
        description: Production Environment
        required: true
        

jobs:
  set_up:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: pip

      - name: Install modules by requirements
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r tests/requirements.txt

      - name: create zip with symlink
        run : |
          zip --symlinks -r venv.zip venv
  
      - uses: actions/upload-artifact@v4
        with:
          name: venv
          path: venv.zip
          retention-days: 1

  black_check:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: [set_up]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: pip

      - uses: actions/download-artifact@v4
        with:
          name: venv
          path: .
  
      - name: Unzip venv folder
        run: |
          unzip venv.zip
      
      - name: Black check
        run: |
          source venv/bin/activate 
          black .

  flake8_check:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: [set_up]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: pip

      - uses: actions/download-artifact@v4
        with:
          name: venv
          path: .
  
      - name: Unzip venv folder
        run: |
          unzip venv.zip
      
      - name: flake8 check
        run: |
          source venv/bin/activate 
          flake8 .

  mypy_check:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: [set_up]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: pip

      - uses: actions/download-artifact@v4
        with:
          name: venv
          path: .
  
      - name: Unzip venv folder
        run: |
          unzip venv.zip
      
      - name: mypy check
        run: |
          source venv/bin/activate 
          mypy .

  unittest:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: [set_up]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: pip

      - uses: actions/download-artifact@v4
        with:
          name: venv
          path: .
  
      - name: Unzip venv folder
        run: |
          unzip venv.zip
      
      - name: do unittest
        run: |
          source venv/bin/activate 
          python -m pytest tests/unit/

  deploy_to_dev:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment: dev
    needs: [black_check, flake8_check, mypy_check, unittest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: pip
      - uses: aws-actions/setup-sam@v2
      - uses: actions/download-artifact@v4
        with:
          name: venv
          path: .
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{vars.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ap-northeast-1
          
      - name: Unzip venv folder
        run: |
          unzip venv.zip

      - name: build package.
        run: |
          sam build -t template.yaml

      - name: Deploy to develop environment. integration test is possible.
        run: |
          sam deploy --config-file samconfig.toml --config-env default

  deploy_to_prod:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment: prod
    needs: [deploy_to_dev]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: pip
      - uses: aws-actions/setup-sam@v2
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{vars.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ap-northeast-1
        
      - name: create productoin venv
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r hello_world/requirements.txt
          
      - name: build package.
        run: |
          sam build -t template.yaml

      - name: Deploy to production environment. release work is finished.
        run: |
          sam deploy --config-file samconfig.toml --config-env prod